// feature
class FriendsList {
  friends = [];

  addFriend(name: string): void {
    this.friends.push(name);
    this.announceFriendship(name);
  }

  announceFriendship(name: string): void {
    console.log(`${name} is now a friend`);
  }

  removeFriend(name: string): void { // two outcomes possible
    const indx = this.friends.indexOf(name);

    if (indx === -1) {
      throw new Error('Friend not found!');
    }
    this.friends.splice(indx, 1);
  }
}

// tests
describe('FriendsList', () => {
  let friendsList: FriendsList;

  beforeEach(() => { // run before each it()
    friendsList = new FriendsList();
  });

  it('initializes friends list', () => {
    expect(friendsList.friends.length).toEqual(0);
  });

  it('adds a friend to the list', () => {
    friendsList.addFriend('John Doe');
    expect(friendsList.friends.length).toEqual(1);
  });

  it('announces friendship', () => {

    friendsList.announceFriendship = jest.fn(); // create mock function to keep track on amount of calls
    expect(friendsList.announceFriendship).not.toHaveBeenCalledTimes(1);

    friendsList.addFriend('Jane Doe');
    expect(friendsList.announceFriendship).toHaveBeenCalledWith('Jane Doe');

  });

  describe('removeFriend', () => {
    it('removes a friend from the list', () => {

      friendsList.addFriend('John Doe');
      expect(friendsList.friends[0]).toEqual('John Doe');

      friendsList.removeFriend('John Doe');
      expect(friendsList.friends[0]).toBeUndefined();

    });

    it('throws an error as friend does not exist', () => {
      expect(() => friendsList.removeFriend('John Doe')).toThrow(Error('Friend not found!'));
    });
  });
});