import { User } from 'src/auth/user.entity';
import { EntityRepository, Repository } from 'typeorm';
import { CreateTaskDto } from './dto/create-task.dto';
import { GetTasksFilterDto } from './dto/get-tasks-filter.dto';
import { TaskStatus } from './task-status.enum';
import { Task } from './task.entity';

@EntityRepository(Task)
export class TaskRepository extends Repository<Task> {

  async getTasks(
    getTasksFilterDto: GetTasksFilterDto,
    user: User
  ): Promise<Task[]> {
    const { status, search } = getTasksFilterDto;
    const query = this.createQueryBuilder('task');

    // only take tasks that this user owns,
    // .userId is automatically generated by typeorm
    query.where('task.userId = :userId', { userId: user.id });

    // .andWhere() = so that you can combine and not override

    if (status) {
      // :status = what consumes 'status' variable from destructuring
      query.andWhere('task.status = :status', { status });
    }

    if (search) {
      // %...% substring search
      query.andWhere('(task.title LIKE :search OR task.description LIKE :search)', { search: `%${search}%` });
    }

    const tasks = await query.getMany();
    return tasks;
  }

  async createTask(
    createTaskDto: CreateTaskDto,
    user: User
  ): Promise<Task> {
    const { title, description } = createTaskDto;

    const task = new Task();
    task.title = title;
    task.description = description;
    task.status = TaskStatus.OPEN;
    task.user = user;
    await task.save();

    delete task.user; // does not delete from entity, but only the value from variable

    return task;
  }
}